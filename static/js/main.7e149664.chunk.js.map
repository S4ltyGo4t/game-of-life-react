{"version":3,"sources":["components/Cell/Cell.js","components/Game/Game.js","App.js","serviceWorker.js","index.js"],"names":["Cell","this","props","x","y","classes","className","cell","style","left","CELL_SIZE","top","width","height","React","Component","withStyles","background","position","WIDTH","HEIGHT","Game","state","cells","isRunning","interval","runGame","setState","runIteration","stopGame","timeoutHandler","window","clearTimeout","handleIntervalChange","event","target","value","handleClick","elemOffset","getElementOffset","offsetX","clientX","offsetY","clientY","Math","floor","cols","rows","board","makeCells","handleRandom","random","handleClear","makeEmptyBoard","boardRef","createRef","console","log","newBoard","neighbors","calculateNeighbors","setTimeout","dirs","i","length","dir","y1","x1","push","rect","current","getBoundingClientRect","doc","document","documentElement","pageXOffset","clientLeft","pageYOffset","clientTop","backgroundSize","onClick","ref","map","key","TextField","label","variant","margin","InputLabelProps","textField","InputProps","type","onChange","Button","color","theme","spacing","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7e149664.chunk.js","sourcesContent":["import React from 'react';\r\nimport {CELL_SIZE} from '../Game';\r\nimport withStyles from '@material-ui/core/styles/withStyles';\r\n\r\nconst styles = () => ({\r\n  cell: {\r\n    background: '#61dafb',\r\n    position: 'absolute'\r\n  }\r\n});\r\n\r\nclass Cell extends React.Component {\r\n  render() {\r\n    const {x, y, classes} = this.props;\r\n    return (\r\n        <div className={classes.cell} style={{\r\n          left: `${CELL_SIZE * x + 1}px`,\r\n          top: `${CELL_SIZE * y + 1}px`,\r\n          width: `${CELL_SIZE - 1}px`,\r\n          height: `${CELL_SIZE - 1}px`,\r\n        }}\r\n        />\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(Cell);","import React from 'react';\r\nimport './Game.css';\r\nimport Cell from '../Cell';\r\nimport Button from '@material-ui/core/Button';\r\nimport {withStyles} from '@material-ui/core/styles'\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nexport const CELL_SIZE = 20;\r\nexport const WIDTH = 800;\r\nexport const HEIGHT = 600;\r\n\r\n\r\nconst styles = theme => ({\r\n  margin: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  textField: {\r\n    color: 'white',\r\n    margin: theme.spacing(1),\r\n  },\r\n});\r\n\r\n\r\nclass Game extends React.Component {\r\n  state = {cells: [], isRunning: false, interval: 1000};\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.rows = HEIGHT / CELL_SIZE;\r\n    this.cols = WIDTH / CELL_SIZE;\r\n    this.board = this.makeEmptyBoard();\r\n    this.boardRef = React.createRef();\r\n  }\r\n\r\n  /*\r\n  * ----------------\r\n  * ---GAME LOGIC---\r\n  * ----------------\r\n  */\r\n\r\n  runGame = () => {\r\n    this.setState({isRunning: true});\r\n    this.runIteration();\r\n  };\r\n\r\n  stopGame = () => {\r\n    this.setState({isRunning: false});\r\n    if (this.timeoutHandler) {\r\n      window.clearTimeout(this.timeoutHandler);\r\n      this.timeoutHandler = null;\r\n    }\r\n  };\r\n\r\n  runIteration() {\r\n    console.log('running iteration');\r\n    let newBoard = this.makeEmptyBoard();\r\n\r\n    // Game logic\r\n    for (let y = 0; y < this.rows; y++) {\r\n      for (let x = 0; x < this.cols; x++) {\r\n        let neighbors = this.calculateNeighbors(this.board, x, y);\r\n        if (this.board[y][x]) {\r\n          if (neighbors === 2 || neighbors === 3) {\r\n            newBoard[y][x] = true;\r\n          } else {\r\n            newBoard[y][x] = false;\r\n          }\r\n        } else {\r\n          if (!this.board[y][x] && neighbors === 3) {\r\n            newBoard[y][x] = true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    this.board = newBoard;\r\n    this.setState({cells: this.makeCells()});\r\n    this.timeoutHandler = window.setTimeout(() => {\r\n      this.runIteration();\r\n    }, this.state.interval);\r\n  }\r\n\r\n  calculateNeighbors(board, x, y) {\r\n    let neighbors = 0;\r\n    const dirs = [[-1, -1], [-1, 0], [-1, 1], [0, 1], [1, 1], [1, 0], [1, -1], [0, -1]];\r\n    for (let i = 0; i < dirs.length; i++) {\r\n      const dir = dirs[i];\r\n      let y1 = y + dir[0];\r\n      let x1 = x + dir[1];\r\n\r\n      if (x1 >= 0 && x1 < this.cols && y1 >= 0 && y1 < this.rows && board[y1][x1]) {\r\n        neighbors++;\r\n      }\r\n    }\r\n\r\n    return neighbors;\r\n  }\r\n\r\n  /*\r\n  * ----------------\r\n  * -----BOARD------\r\n  * ----------------\r\n  */\r\n\r\n  // Create an empty board\r\n  makeEmptyBoard() {\r\n    let board = [];\r\n    for (let y = 0; y < this.rows; y++) {\r\n      board[y] = [];\r\n      for (let x = 0; x < this.cols; x++) {\r\n        board[y][x] = false;\r\n      }\r\n    }\r\n    return board;\r\n  }\r\n\r\n  // Create cells from this.board\r\n  makeCells() {\r\n    let cells = [];\r\n    for (let y = 0; y < this.rows; y++) {\r\n      for (let x = 0; x < this.cols; x++) {\r\n        if (this.board[y][x]) {\r\n          cells.push({x, y});\r\n        }\r\n      }\r\n    }\r\n    return cells;\r\n  }\r\n\r\n  getElementOffset() {\r\n    const rect = this.boardRef.current.getBoundingClientRect();\r\n    const doc = document.documentElement;\r\n    return {\r\n      x: (rect.left + window.pageXOffset) - doc.clientLeft,\r\n      y: (rect.top + window.pageYOffset) - doc.clientTop,\r\n    };\r\n  }\r\n\r\n  /*\r\n  * ----------------\r\n  * ----HANDLERS----\r\n  * ----------------\r\n  */\r\n  handleIntervalChange = (event) => {\r\n    this.setState(this.setState({interval: event.target.value}));\r\n  };\r\n\r\n  handleClick = (event) => {\r\n    const elemOffset = this.getElementOffset();\r\n    const offsetX = event.clientX - elemOffset.x;\r\n    const offsetY = event.clientY - elemOffset.y;\r\n\r\n    const x = Math.floor(offsetX / CELL_SIZE);\r\n    const y = Math.floor(offsetY / CELL_SIZE);\r\n\r\n    if (x >= 0 && x <= this.cols && y >= 0 && y <= this.rows) {\r\n      this.board[y][x] = !this.board[y][x];\r\n    }\r\n    this.setState({cells: this.makeCells()});\r\n  };\r\n\r\n  handleRandom = () => {\r\n    for (let y = 0; y < this.rows; y++) {\r\n      for (let x = 0; x < this.cols; x++) {\r\n        this.board[y][x] = (Math.random() >= 0.5);\r\n      }\r\n    }\r\n    this.setState({cells: this.makeCells()});\r\n  };\r\n\r\n  handleClear = () => {\r\n    this.board = this.makeEmptyBoard();\r\n    this.setState({cells: this.makeCells()});\r\n  };\r\n\r\n\r\n  render() {\r\n    const {cells} = this.state;\r\n    const {classes} = this.props;\r\n    return (\r\n        <div>\r\n          <div className=\"Board\"\r\n               style={{\r\n                 width: WIDTH,\r\n                 height: HEIGHT,\r\n                 backgroundSize: `${CELL_SIZE}px ${CELL_SIZE}px`\r\n               }}\r\n               onClick={this.handleClick}\r\n               ref={this.boardRef}\r\n          >\r\n            {cells.map(cell => (\r\n                <Cell x={cell.x} y={cell.y} key={`${cell.x},${cell.y}`}/>\r\n            ))}\r\n          </div>\r\n          <div className=\"controls\">\r\n            <TextField label={'Update (ms)'} variant={'outlined'}\r\n                       className={classes.margin} InputLabelProps={{className: classes.textField}}\r\n                       InputProps={{className: classes.textField}}\r\n                       type={'number'} value={this.state.interval} onChange={this.handleIntervalChange}\r\n            />\r\n            <div className={'buttons'}>\r\n              <Button className={classes.margin} onClick={this.handleRandom}\r\n                      variant={'contained'} color={'primary'}>Random</Button>\r\n              <Button className={classes.margin} onClick={this.handleClear}\r\n                      variant={'contained'} color={'primary'}>Clear</Button>\r\n              {this.state.isRunning ?\r\n                  <Button className={classes.margin} onClick={this.stopGame}\r\n                          variant={'contained'} color={'secondary'}>Stop</Button> :\r\n                  <Button className={classes.margin} onClick={this.runGame}\r\n                          variant={'contained'} color={'primary'}>Run</Button>}\r\n            </div>\r\n          </div>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default withStyles(styles)(Game);\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Game from './components/Game';\r\n\r\nfunction App() {\r\n  return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <h2>\r\n            Game of Life\r\n          </h2>\r\n          <Game/>\r\n          {/*<GameMenu>*/}\r\n\r\n          {/*</GameMenu>*/}\r\n        </header>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}